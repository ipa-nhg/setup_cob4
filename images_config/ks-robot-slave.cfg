#Generated by Kickstart Configurator
#platform=x86

#System language
lang en_US
#Language modules to install
langsupport en_US
#System keyboard
keyboard de
#System mouse
mouse
#System timezone
timezone Europe/Berlin
#Root password
rootpw --iscrypted $1$0DxJd73I$GOjLQEJ3LaHKCXsLfyPTy1
#Initial user
user robot-local --fullname "robot-local" --iscrypted --password $1$5CMWYFBH$lgSQhpARVj3RZtQjvTW7C0

#Reboot after installation
reboot
#Use text mode install
text
#Install OS instead of upgrade
install
#Use CDROM installation media
cdrom
#System bootloader configuration
bootloader --location=mbr 
#Clear the Master Boot Record
zerombr yes
#Partition clearing information
clearpart --all --initlabel 
#Disk partitioning information
#####################################################
clearpart --all --initlabel
part /boot --fstype ext4 --size 200 --asprimary
part swap --size 1024
part pv.01 --size 1 --grow
volgroup rootvg pv.01
logvol / --fstype ext4 --vgname=rootvg --size=1 --grow --name=rootvol
# needed to answer the 'do you want to write changes to disk"
preseed partman-lvm/confirm_nooverwrite boolean true

# needed to answer the question about not having a separate /boot
preseed partman-auto-lvm/no_boot boolean true
#####################################################
#System authorization infomation
auth  --useshadow  --enablemd5 
#Network information
#network --bootproto=dhcp --device=eth0
# Network information
network --onboot=on --device=eth1 --noipv6 --bootproto=dhcp --active
#network --onboot=on --device=eth0 --noipv6 --bootproto=bootp --active

#Firewall configuration
##firewall --disabled --trust=eth0 --ssh
firewall --disabled --http --ftp --ssh 
#Do not configure the X Window System
skipx


# Additional packages to install.
%packages
vim
gnome
tree
gitg
git-gui
meld
openjdk-6-jdk
zsh
terminator
language-pack-de
language-pack-en
ipython

########################PRE-INSTALLATION####################################
%pre --interpreter=/bin/sh
#!/bin/sh

exec < /dev/tty6 > /dev/tty6 2>&1
chvt 6
LOGFILE=/tmp/ks-pre.log
##mktemp network.XXX
##echo "network --device eth0 --bootproto dhcp --hostname localhost.localdomain" > /tmp/network.ks

echo "################################"
echo "# Running Pre Configuration    #"
echo "################################"
#presetup script
CONFIRM=no
while [ "$CONFIRM" != "y" ]
do
echo -n "Give hostname:"
read HOSTNAME
if [ "$HOSTNAME" == "" ]
then
HOSTLINE="network --device=etho --bootproto=dhcp"
echo -e -n "\e[00;31mConfigure OS to use DHCP?(y/n): \e[00m"
read CONFIRM
else
echo -n "Give servername:"
read SERVERNAME
echo -e -n "Hostname: \e[01;36m$HOSTNAME \e[00m"
echo -e -n "Servername: \e[01;36m$SERVERNAME \e[00m"
HOSTLINE="network --device=eth0 --bootproto=static --netmask= --gateway= --nameserver=$SERVERNAME --hostname=$HOSTNAME localhost.localdomain"
sleep 5
echo -e -n "Is the above configuration correct?(y/n): "
read CONFIRM
fi
done
echo $HOSTLINE > /tmp/test.ks
hostname $HOSTNAME
2>&1 | /usr/bin/tee $LOGFILE
chvt 1
exec < /dev/tty1 > /dev/tty1

%end
################################################################################
# Define variables for Gnome settings file. 
settingsDir=/usr/share/glib-2.0/schemas
settingsFile=gnome-tweaks.gschema.override
settingsFileWithDir=$settingsDir/$settingsFile

# Create a file for Gnome settings, which will later be compiled in this script.
touch $settingsFileWithDir

# Enable VNC
echo "[org.gnome.Vino]" >> $settingsFileWithDir
echo "authentication-methods=['vnc']" >> $settingsFileWithDir
echo "enabled=true" >> $settingsFileWithDir
echo "require-encryption=false" >> $settingsFileWithDir
echo "prompt-enabled=false" >> $settingsFileWithDir
echo "vnc-password='bXVjaGhhY2tlcndvdw=='" >> $settingsFileWithDir

# Turn off screen lock
echo "" >> $settingsFileWithDir
echo "[org.gnome.desktop.screensaver]" >> $settingsFileWithDir
echo "lock-enabled=false" >> $settingsFileWithDir

# Turn off screen timeout
echo "" >> $settingsFileWithDir
echo "[org.gnome.desktop.session]" >> $settingsFileWithDir
echo "idle-delay=0" >> $settingsFileWithDir

# Change default favorite applications
echo "[org.gnome.shell]" >> $settingsFileWithDir
echo "favorite-apps=['google-chrome.desktop','gnome-terminal.desktop','nautilus.desktop']" >> $settingsFileWithDir

# Compile Gnome settings
glib-compile-schemas $settingsDir

# Turn on Wake-on-LAN
ethtool -s eth0 wol g

# Enable shutdown and updates for ernestas without password
echo "" >> /etc/sudoers
echo "#Custom rules" >> /etc/sudoers
echo "ernestas ALL = NOPASSWD: /sbin/shutdown" >> /etc/sudoers
echo "ernestas ALL = NOPASSWD: /usr/bin/apt-get" >> /etc/sudoers

# Install Google Chrome
wget https://dl.google.com/linux/direct/google-chrome-stable_current_i386.deb
dpkg -i google-chrome-stable_current_i386.deb

# Delete Chrome install
rm google-chrome-stable_current_i386.deb

# Clean
#apt-get -f -y install

#apt-get -y autoremove
#apt-get clean

# Add your custom post installation script here. It's not necessary, but you can add something depending on your needs. Here's my script:

###############################POST-INSTALLATION############################################
###For network settings####
%post --interpreter=/bin/bash --logfile /root/ks-post.log

apt-get -y remove biosdevname -y --force-yes

update-initramfs -u
update-grub
##dpkg-reconfigure network-manager
##service network-manager restart
apt-get update && apt-get upgrade -y
HOSTNAME=$(cat /etc/hostname)
echo $HOSTNAME
cp /etc/network/interfaces /etc/network/interfaces.backup.$(date "+%Y-%m-%d")

cp /etc/network/interfaces /etc/network/interfaces.orig
echo "mv /etc/network/interfaces.orig /etc/network/interfaces && ifup -a && sed -i '/fixnet.sh/d' /etc/rc.local && rm -f /fixnet.sh" > /fixnet.sh
sed -i '/exit 0/ibash /fixnet.sh' /etc/rc.local
ln -s /etc/network/interfaces /etc/network/interfaces
apt-get install lightdm -y --force-yes
dpkg-reconfigure lightdm
HN1=$(echo ${HOSTNAME%-*}-t1)
echo $HN1
if [[ "$HOSTNAME" == "$HN1" ]]
then

wget https://raw.githubusercontent.com/ipa-nhg-dd/setup_cob4/master/cob-pcs/networkInterfacesT1 /etc/network/interfaces
wget https://raw.githubusercontent.com/ipa320/setup_cob4/master/udev_rules/98-led.rules -P /etc/udev/rules.d/98-led.rules
wget https://raw.githubusercontent.com/ipa320/setup_cob4/master/udev_rules/99-gripper.rules -P /etc/udev/rules.d/99-gripper.rules

fi

HN2=$(echo ${HOSTNAME%-*}-t2)
echo $HN2
if [[ "$HOSTNAME" == "$HN2" ]]
then
wget https://raw.githubusercontent.com/ipa-nhg-dd/setup_cob4/master/cob-pcs/networkInterfacesT1 /etc/network/interfaces
wget https://raw.githubusercontent.com/ipa320/setup_cob4/master/udev_rules/98-led.rules -P /etc/udev/rules.d/98-led.rules
wget https://raw.githubusercontent.com/ipa320/setup_cob4/master/udev_rules/99-gripper.rules -P /etc/udev/rules.d/99-gripper.rules

fi
HN3=$(echo ${HOSTNAME%-*}-t3)
echo $HN3
if [[ "$HOSTNAME" == "$HN3" ]]
then
wget https://raw.githubusercontent.com/ipa-nhg-dd/setup_cob4/master/cob-pcs/networkInterfacesT1 /etc/network/interfaces
wget https://raw.githubusercontent.com/ipa320/setup_cob4/master/udev_rules/98-led.rules -P /etc/udev/rules.d/98-led.rules
wget https://raw.githubusercontent.com/ipa320/setup_cob4/master/udev_rules/99-gripper.rules -P /etc/udev/rules.d/99-gripper.rules

fi
HN3=$(echo ${HOSTNAME%-*}-h1)
echo $HN3
if [[ "$HOSTNAME" == "$HN3" ]]
then
wget https://raw.githubusercontent.com/ipa-nhg-dd/setup_cob4/master/cob-pcs/networkInterfacesT1 /etc/network/interfaces
fi
HN4=$(echo ${HOSTNAME%-*}-s1)
echo $HN4
if [[ "$HOSTNAME" == "$HN4" ]]
then
echo "auto lo
wget https://raw.githubusercontent.com/ipa-nhg-dd/setup_cob4/master/cob-pcs/networkInterfacesT1 /etc/network/interfaces
fi

ifdown wlan0
ifup wlan0
ifdown eth0
ifup eth0


#else 
#echo "Hostname is not Matched $HOST"
#fi

##Network settings##
##echo "auto eth0" >> /etc/network/interfaces
##echo "iface eth0 inet dhcp" >> /etc/network/interfaces
%end
###########################


%post --interpreter=/bin/bash

#!/bin/bash
apt-get update && apt-get upgrade -y
# Turn on automatic login for user ernestas.
sed -i '/#  AutomaticLogin/ s/^#  //;s/user1/ernestas/g' /etc/gdm/custom.conf
#####BasicInstallation##################################
#####INFO:After installing basic tools#################
echo -e "\n${green}INFO:Installing basic tools${NC}\n"
if grep -q GRUB_RECORDFAIL_TIMEOUT= /etc/default/grub ; then
echo "found GRUB_RECORD_FAIL flag already, skipping update-grub call"
else
echo "GRUB_RECORDFAIL_TIMEOUT=10" >> /etc/default/grub
update-grub
fi

####################################################

#####INFO:Upgrade the kernel###############
apt-get install --install-recommends linux-generic-lts-xenial -y --force-yes

chroot /target apt-get -y remove modemmanager
###########INFO: Network Manager###############
apt-get install network-manager

echo -e "\n${green}INFO:Upgrade the kernel ${NC}\n"


#####INFO:Let the server send a alive interval to clients to not get a broken pipe
echo -e "\n${green}INFO:Let the server send a alive interval to clients to not get a broken pipe${NC}\n"
dpkg --configure -a
# add normal apt source list
(
cat <<'EOP'

# Package generated configuration file
# See the sshd_config(5) manpage for details

# What ports, IPs and protocols we listen for
Port 22
# Use these options to restrict which interfaces/protocols sshd will bind to
#ListenAddress ::
#ListenAddress 0.0.0.0
Protocol 2
# HostKeys for protocol version 2
HostKey /etc/ssh/ssh_host_rsa_key
HostKey /etc/ssh/ssh_host_dsa_key
HostKey /etc/ssh/ssh_host_ecdsa_key
HostKey /etc/ssh/ssh_host_ed25519_key
#Privilege Separation is turned on for security
UsePrivilegeSeparation yes

# Lifetime and size of ephemeral version 1 server key
KeyRegenerationInterval 3600
ServerKeyBits 1024

# Logging
SyslogFacility AUTH
LogLevel INFO

# Authentication:
LoginGraceTime 120
PermitRootLogin yes
StrictModes yes

RSAAuthentication yes
PubkeyAuthentication yes
#AuthorizedKeysFile	%h/.ssh/authorized_keys

# Don't read the user's ~/.rhosts and ~/.shosts files
IgnoreRhosts yes
# For this to work you will also need host keys in /etc/ssh_known_hosts
RhostsRSAAuthentication no
# similar for protocol version 2
HostbasedAuthentication no
# Uncomment if you don't trust ~/.ssh/known_hosts for RhostsRSAAuthentication
#IgnoreUserKnownHosts yes

# To enable empty passwords, change to yes (NOT RECOMMENDED)
PermitEmptyPasswords no

# Change to yes to enable challenge-response passwords (beware issues with
# some PAM modules and threads)
ChallengeResponseAuthentication no

# Change to no to disable tunnelled clear text passwords
#PasswordAuthentication yes

# Kerberos options
#KerberosAuthentication no
#KerberosGetAFSToken no
#KerberosOrLocalPasswd yes
#KerberosTicketCleanup yes

# GSSAPI options
#GSSAPIAuthentication no
#GSSAPICleanupCredentials yes

X11UseLocalhost no
X11Forwarding yes
X11DisplayOffset 10
PrintMotd no
PrintLastLog yes
TCPKeepAlive yes
#UseLogin no

#MaxStartups 10:30:60
#Banner /etc/issue.net

# Allow client to pass locale environment variables
AcceptEnv LANG LC_*

Subsystem sftp /usr/lib/openssh/sftp-server

# Set this to 'yes' to enable PAM authentication, account processing,
# and session processing. If this is enabled, PAM authentication will
# be allowed through the ChallengeResponseAuthentication and
# PasswordAuthentication.  Depending on your PAM configuration,
# PAM authentication via ChallengeResponseAuthentication may bypass
# the setting of "PermitRootLogin yes".
# If you just want the PAM account and session checks to run without
# PAM authentication, then enable this but set PasswordAuthentication
# and ChallengeResponseAuthentication to 'no'.
UsePAM yes
ClientAliveInterval 60
PermitRootLogin yes
EOP
) > /etc/ssh/sshd_config

/etc/init.d/ssh restart

sed -i 's/PermitRootLogin without-password/PermitRootLogin yes/g' /etc/ssh/sshd_config

echo -e "\n${green}INFO:Checkout the setup repository${NC}\n"


echo -e "\n${green}INFO:Allow robot user to execute sudo command without password${NC}\n"



#######################################################################
echo -e "\n${green}INFO:Setup local ROOT user${NC}\n"
sleep 5
#########################setup local root user##########################
###passwd root##########################

rootpw --iscrypted $1$vizH0RQG$TKZAKKZ3ACNxOPM9GJlTI0    
#############################################      
echo -e "\n${green}INFO: Install ROS${NC}\n"
sleep 5
echo -e "\n${green}   INFO: Setup your source.list${NC}\n"
sh -c 'echo "deb http://packages.ros.org/ros/ubuntu trusty main" >> /etc/apt/sources.list.d/ros-latest.list'
echo -e "\n${green}   INFO: Set up your keys${NC}\n"
wget http://packages.ros.org/ros.key -O - | apt-key add - 
echo -e "\n${green}   INFO: Install ROS${NC}\n"


dpkg --configure -a
# add normal apt source list
(
cat <<'EOP'
#deb deb http://de.archive.ubuntu.com/ubuntu/ trusty main restricted
#deb http://de.archive.ubuntu.com/ubuntu/ trusty universe
#deb http://de.archive.ubuntu.com/ubuntu/ trusty-updates main restricted
#deb http://ftp.de.debian.org/debian/ wheezy main contrib non-free
#deb http://ftp.de.debian.org/debian/ trusty main contrib non-free
#######################################################################################
# deb cdrom:[Ubuntu 14.04.5 LTS _Trusty Tahr_ - Release amd64 (20160803)]/ trusty main restricted

# See http://help.ubuntu.com/community/UpgradeNotes for how to upgrade to
# newer versions of the distribution.
deb http://de.archive.ubuntu.com/ubuntu/ trusty main restricted
deb-src http://de.archive.ubuntu.com/ubuntu/ trusty main restricted

## Major bug fix updates produced after the final release of the
## distribution.
deb http://de.archive.ubuntu.com/ubuntu/ trusty-updates main restricted
deb-src http://de.archive.ubuntu.com/ubuntu/ trusty-updates main restricted

## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu
## team. Also, please note that software in universe WILL NOT receive any
## review or updates from the Ubuntu security team.
deb http://de.archive.ubuntu.com/ubuntu/ trusty universe
deb-src http://de.archive.ubuntu.com/ubuntu/ trusty universe
deb http://de.archive.ubuntu.com/ubuntu/ trusty-updates universe
deb-src http://de.archive.ubuntu.com/ubuntu/ trusty-updates universe

## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu 
## team, and may not be under a free licence. Please satisfy yourself as to 
## your rights to use the software. Also, please note that software in 
## multiverse WILL NOT receive any review or updates from the Ubuntu
## security team.
deb http://de.archive.ubuntu.com/ubuntu/ trusty multiverse
deb-src http://de.archive.ubuntu.com/ubuntu/ trusty multiverse
deb http://de.archive.ubuntu.com/ubuntu/ trusty-updates multiverse
deb-src http://de.archive.ubuntu.com/ubuntu/ trusty-updates multiverse

## N.B. software from this repository may not have been tested as
## extensively as that contained in the main release, although it includes
## newer versions of some applications which may provide useful features.
## Also, please note that software in backports WILL NOT receive any review
## or updates from the Ubuntu security team.
deb http://de.archive.ubuntu.com/ubuntu/ trusty-backports main restricted universe multiverse
deb-src http://de.archive.ubuntu.com/ubuntu/ trusty-backports main restricted universe multiverse

deb http://security.ubuntu.com/ubuntu trusty-security main restricted
deb-src http://security.ubuntu.com/ubuntu trusty-security main restricted
deb http://security.ubuntu.com/ubuntu trusty-security universe
deb-src http://security.ubuntu.com/ubuntu trusty-security universe
deb http://security.ubuntu.com/ubuntu trusty-security multiverse
deb-src http://security.ubuntu.com/ubuntu trusty-security multiverse

## Uncomment the following two lines to add software from Canonical's
## 'partner' repository.
## This software is not part of Ubuntu, but is offered by Canonical and the
## respective vendors as a service to Ubuntu users.
# deb http://archive.canonical.com/ubuntu trusty partner
# deb-src http://archive.canonical.com/ubuntu trusty partner

## This software is not part of Ubuntu, but is offered by third-party
## developers who want to ship their latest software.
deb http://extras.ubuntu.com/ubuntu trusty main
deb-src http://extras.ubuntu.com/ubuntu trusty main

EOP
) > /etc/apt/sources.list

apt-get update
apt-get upgrade -y


sleep 20
apt-get clean
apt-get update
aptitude install openssh-client=1:5.9p1-5ubuntu1.10
apt-get install openssh-server -y
sleep20
apt-get install aptitude -y
apt-get install ros-indigo-rosbash -y -f -y
apt-get update

apt-get install python-ros-* -y -f -y
sleep 20

apt-get clean
apt-get update
apt-get upgrade -y
apt-get -f install 
sleep20
apt-get install ros-indigo-care-o-bot-robot -y -f -y
sleep20

rosdep init
rosdep update



echo -e "\n${green}INFO: Setup bash environment${NC}\n"
sleep 5
ROBOT=$(echo ${HOSTNAME%-*})
echo $ROBOT
if [[ "$HOSTNAME" == "$ROBOT-t"* ]]
then
wget https://raw.githubusercontent.com/ipa-nhg-dd/setup_cob4/master/cob-pcs/cob.bash.bashrc.t -P /etc/cob.bash.bashrc
fi

if [[ "$HOSTNAME" == "$ROBOT-h"* ]]
then
wget https://raw.githubusercontent.com/ipa-nhg-dd/setup_cob4/master/cob-pcs/cob.bash.bashrc.h -P /etc/cob.bash.bashrc
fi
if [[ "$HOSTNAME" == "$ROBOT-s"* ]]
then
wget https://raw.githubusercontent.com/ipa-nhg-dd/setup_cob4/master/cob-pcs/cob.bash.bashrc.s -P /etc/cob.bash.bashrc
fi

echo -e "\n${green}INFO: Setup network interfaces${NC}\n"
sleep 5

if [[ "$HOSTNAME" == "$ROBOT-t1" ]]
then

wget https://raw.githubusercontent.com/ipa-nhg-dd/setup_cob4/master/cob-pcs/networkInterfacesT1 -P /etc/network/interfaces 
fi


%end


%post  


###############sudo gpasswd -a $(whoami) docker


echo "\n${green}INFO:Setup local ROOT user${NC}\n"
  sleep 5
#passwd d root
#/usr/bin/passwd -d root

echo "Defaults rootpw" >> /etc/sudoers
rootpw robot
#passwd root --iscrypted $1$tEHboVqc$8dkJ2OvCfg8P3z/ru2puI0


echo "robot-local ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
echo "robot ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers



apt-get -y -q update

HOST=$(cat /etc/hostname)
echo $HOST

SERVERNAME=$(echo ${HOST%-*}-b1)
echo $SERVERNAME
touch /etc/auto.direct

echo "/u  -fstype=nfs4    $SERVERNAME:/" >> /etc/auto.direct
update-rc.d autofs defaults
service autofs restart
modprobe nfs
###########################NTP-CONFIGURATION######################
echo "# Specify one or more NTP servers." >> /etc/ntp.conf
echo "# Use servers from the NTP Pool Project. Approved by Ubuntu Technical Board" >> /etc/ntp.conf
echo "# on 2011-02-08 (LP: #104525). See http://www.pool.ntp.org/join.html for" >> /etc/ntp.conf
echo "# more information." >> /etc/ntp.conf
echo "server $SERVERNAME " >> /etc/ntp.conf
echo "# By default, exchange time with everybody, but don't allow configuration." >> /etc/ntp.conf
echo "restrict -4 default kod notrap nomodify nopeer noquery" >> /etc/ntp.conf
echo "restrict -6 default kod notrap nomodify nopeer noquery" >> /etc/ntp.conf
echo "# Local users may interrogate the ntp server more closely." >> /etc/ntp.conf
echo "restrict 127.0.0.1" >> /etc/ntp.conf
echo "restrict ::1" >> /etc/ntp.conf


%end


%post 
#############################NFS INSTALL#############################
echo -e "\n${red}NFS Install ${NC}\n"
apt-get install nfs-kernel-server autofs -y -f -y
echo "/-  /etc/auto.direct" >> /etc/auto.master
ping -c 1 -w 3 $SERVERNAME
#ping -c 1 -w 3 $10.0.1.170
if [ $? -ne 0 ] ; then
echo -e "\n${red}ERROR:Server $SERVERNAME unreachable ${NC}\n"
exit
fi
sed -i 's/NEED_STADT\=/NEED_STADT\=yes/g' /etc/default/nfs-common
update-rc.d autofs defaults
service autofs restart
modprobe nfs

############################NETDATA TOOLS##############################

apt-get install zlib1g-dev uuid-dev libmnl-dev gcc make git autoconf autoconf-archive autogen automake pkg-config curl -y
git clone https://github.com/firehol/netdata.git --depth=1 /root/netdata
cd /root/netdata
./netdata-installer.sh
############################NOMACHINE##################################

apt-get install pulseaudio -y
wget http://download.nomachine.com/download/5.1/Linux/nomachine_5.1.9_6_amd64.deb -P /root/nomachine_5.1.9_6_amd64.deb
dpkg -i /root/nomachine_5.1.9_6_amd64.deb
############################Candump tools##################################

initctl stop candump2mongodb
rm /etc/init/candump2mongodb.conf
wget https://raw.githubusercontent.com/ipa320/setup_cob4/master/scripts/socket_buffer.py -P /usr/local/bin/socket_buffer.py
chmod +x /usr/local/bin/socket_buffer.py
wget https://raw.githubusercontent.com/ipa320/setup_cob4/master/scripts/candump_any.conf -P /etc/init/candump_any.conf
initctl start candump_any



%end




