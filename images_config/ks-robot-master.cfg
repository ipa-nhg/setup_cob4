#Generated by Kickstart Configurator
#platform=x86

#System language
lang en_US
#Language modules to install
langsupport en_US
#System keyboard
keyboard de
#System mouse
mouse
#System timezone
timezone Europe/Berlin
#Root password
rootpw --iscrypted $1$0DxJd73I$GOjLQEJ3LaHKCXsLfyPTy1
#Initial user
user robot-local --fullname "robot-local" --iscrypted --password $1$5CMWYFBH$lgSQhpARVj3RZtQjvTW7C0

#Reboot after installation
reboot
#Use text mode install
text
#Install OS instead of upgrade
install
#Use CDROM installation media
cdrom
#System bootloader configuration
bootloader --location=mbr 
#Clear the Master Boot Record
zerombr yes
#Partition clearing information
clearpart --all --initlabel 
#Disk partitioning information
################PARTITION#####################################
clearpart --all --initlabel
part /boot --fstype ext4 --size 200 --asprimary
part swap --size 1024
part pv.01 --size 1 --grow
volgroup rootvg pv.01
logvol / --fstype ext4 --vgname=rootvg --size=1 --grow --name=rootvol
# needed to answer the 'do you want to write changes to disk"
preseed partman-lvm/confirm_nooverwrite boolean true

# needed to answer the question about not having a separate /boot
preseed partman-auto-lvm/no_boot boolean true
#####################################################
#System authorization infomation
auth  --useshadow  --enablemd5 
#Firewall configuration
firewall --disabled 
#Do not configure the X Window System
skipx

#######################PACKAGES################################
# Additional packages to install.
%packages
vim
gnome
tree
gitg
git-gui
meld
openjdk-6-jdk
zsh
terminator
language-pack-de
language-pack-en
ipython
######################PRE-INSTALLATION#######################################

%pre
#!/bin/bash

###Request for hostname#########################################
exec < /dev/tty6 > /dev/tty6
chvt 6
clear
echo "################################"
echo "# A Small Request ! #"
echo "################################"
echo -n "Enter the name of the machine (hostname): "
read hostn
hostname $hostn
echo -e "NETWORKING=yes\nHOSTNAME=$hostn" >> /etc/sysconfig/network
echo "You have chosen $hostn. Press enter to continue or Ctrl Alt Del to restart"
read
###Go back to tty1##
exec < /dev/tty1 > /dev/tty1
chvt 1

%end
############################################################################# 
# Define variables for Gnome settings file. 
settingsDir=/usr/share/glib-2.0/schemas
settingsFile=gnome-tweaks.gschema.override
settingsFileWithDir=$settingsDir/$settingsFile

# Create a file for Gnome settings, which will later be compiled in this script.
touch $settingsFileWithDir

# Enable VNC
echo "[org.gnome.Vino]" >> $settingsFileWithDir
echo "authentication-methods=['vnc']" >> $settingsFileWithDir
echo "enabled=true" >> $settingsFileWithDir
echo "require-encryption=false" >> $settingsFileWithDir
echo "prompt-enabled=false" >> $settingsFileWithDir
echo "vnc-password='bXVjaGhhY2tlcndvdw=='" >> $settingsFileWithDir

# Turn off screen lock
echo "" >> $settingsFileWithDir
echo "[org.gnome.desktop.screensaver]" >> $settingsFileWithDir
echo "lock-enabled=false" >> $settingsFileWithDir

# Turn off screen timeout
echo "" >> $settingsFileWithDir
echo "[org.gnome.desktop.session]" >> $settingsFileWithDir
echo "idle-delay=0" >> $settingsFileWithDir

# Change default favorite applications
echo "[org.gnome.shell]" >> $settingsFileWithDir
echo "favorite-apps=['google-chrome.desktop','gnome-terminal.desktop','nautilus.desktop']" >> $settingsFileWithDir

# Compile Gnome settings
glib-compile-schemas $settingsDir

# Turn on Wake-on-LAN
ethtool -s eth0 wol g

# Enable shutdown and updates for ernestas without password
echo "" >> /etc/sudoers
echo "#Custom rules" >> /etc/sudoers
echo "ernestas ALL = NOPASSWD: /sbin/shutdown" >> /etc/sudoers
echo "ernestas ALL = NOPASSWD: /usr/bin/apt-get" >> /etc/sudoers

# Install Google Chrome
wget https://dl.google.com/linux/direct/google-chrome-stable_current_i386.deb
dpkg -i google-chrome-stable_current_i386.deb

# Delete Chrome install
rm google-chrome-stable_current_i386.deb

# Clean
#apt-get -f -y install

#apt-get -y autoremove
#apt-get clean

# Add your custom post installation script here. It's not necessary, but you can add something depending on your needs. Here's my script:
######################POST-INSTALLATION####################################### 
%post --interpreter=/bin/bash

#!/bin/bash
apt-get update && apt-get upgrade -y
# Turn on automatic login for user ernestas.
sed -i '/#  AutomaticLogin/ s/^#  //;s/user1/ernestas/g' /etc/gdm/custom.conf
#####BasicInstallation##################################
#####INFO:After installing basic tools##################
echo -e "\n${green}INFO:Installing basic tools${NC}\n"
if grep -q GRUB_RECORDFAIL_TIMEOUT= /etc/default/grub ; then
echo "found GRUB_RECORD_FAIL flag already, skipping update-grub call"
else
echo "GRUB_RECORDFAIL_TIMEOUT=10" >> /etc/default/grub
update-grub
fi
#####INFO:Upgrade the kernel############################
apt-get install --install-recommends linux-generic-lts-xenial -y --force-yes

echo -e "\n${green}INFO:Upgrade the kernel ${NC}\n"


#####INFO:Let the server send a alive interval to clients to not get a broken pipe###############
echo -e "\n${green}INFO:Let the server send a alive interval to clients to not get a broken pipe${NC}\n"


echo "ClientAliveInterval 60" >> /etc/ssh/sshd_config
sed -i 's/PermitRootLogin without-password/PermitRootLogin yes/g' /etc/ssh/sshd_config

#######################################################################
echo -e "\n${green}INFO:Setup local ROOT user${NC}\n"
sleep 5
#########################setup local root user##########################
###passwd root##########################

rootpw --iscrypted $1$vizH0RQG$TKZAKKZ3ACNxOPM9GJlTI0    
#############################################      
echo -e "\n${green}INFO: Install ROS${NC}\n"
sleep 5
echo -e "\n${green}   INFO: Setup your source.list${NC}\n"
sh -c 'echo "deb http://packages.ros.org/ros/ubuntu trusty main" >> /etc/apt/sources.list.d/ros-latest.list'
echo -e "\n${green}   INFO: Set up your keys${NC}\n"
wget http://packages.ros.org/ros.key -O - | apt-key add - 
echo -e "\n${green}   INFO: Install ROS${NC}\n"


dpkg --configure -a
# add normal apt source list
(
cat <<'EOP'
#deb deb http://de.archive.ubuntu.com/ubuntu/ trusty main restricted
#deb http://de.archive.ubuntu.com/ubuntu/ trusty universe
#deb http://de.archive.ubuntu.com/ubuntu/ trusty-updates main restricted
#deb http://ftp.de.debian.org/debian/ wheezy main contrib non-free
#deb http://ftp.de.debian.org/debian/ trusty main contrib non-free
#######################################################################################
# deb cdrom:[Ubuntu 14.04.5 LTS _Trusty Tahr_ - Release amd64 (20160803)]/ trusty main restricted

# See http://help.ubuntu.com/community/UpgradeNotes for how to upgrade to
# newer versions of the distribution.
deb http://de.archive.ubuntu.com/ubuntu/ trusty main restricted
deb-src http://de.archive.ubuntu.com/ubuntu/ trusty main restricted

## Major bug fix updates produced after the final release of the
## distribution.
deb http://de.archive.ubuntu.com/ubuntu/ trusty-updates main restricted
deb-src http://de.archive.ubuntu.com/ubuntu/ trusty-updates main restricted

## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu
## team. Also, please note that software in universe WILL NOT receive any
## review or updates from the Ubuntu security team.
deb http://de.archive.ubuntu.com/ubuntu/ trusty universe
deb-src http://de.archive.ubuntu.com/ubuntu/ trusty universe
deb http://de.archive.ubuntu.com/ubuntu/ trusty-updates universe
deb-src http://de.archive.ubuntu.com/ubuntu/ trusty-updates universe

## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu 
## team, and may not be under a free licence. Please satisfy yourself as to 
## your rights to use the software. Also, please note that software in 
## multiverse WILL NOT receive any review or updates from the Ubuntu
## security team.
deb http://de.archive.ubuntu.com/ubuntu/ trusty multiverse
deb-src http://de.archive.ubuntu.com/ubuntu/ trusty multiverse
deb http://de.archive.ubuntu.com/ubuntu/ trusty-updates multiverse
deb-src http://de.archive.ubuntu.com/ubuntu/ trusty-updates multiverse

## N.B. software from this repository may not have been tested as
## extensively as that contained in the main release, although it includes
## newer versions of some applications which may provide useful features.
## Also, please note that software in backports WILL NOT receive any review
## or updates from the Ubuntu security team.
deb http://de.archive.ubuntu.com/ubuntu/ trusty-backports main restricted universe multiverse
deb-src http://de.archive.ubuntu.com/ubuntu/ trusty-backports main restricted universe multiverse

deb http://security.ubuntu.com/ubuntu trusty-security main restricted
deb-src http://security.ubuntu.com/ubuntu trusty-security main restricted
deb http://security.ubuntu.com/ubuntu trusty-security universe
deb-src http://security.ubuntu.com/ubuntu trusty-security universe
deb http://security.ubuntu.com/ubuntu trusty-security multiverse
deb-src http://security.ubuntu.com/ubuntu trusty-security multiverse

## Uncomment the following two lines to add software from Canonical's
## 'partner' repository.
## This software is not part of Ubuntu, but is offered by Canonical and the
## respective vendors as a service to Ubuntu users.
# deb http://archive.canonical.com/ubuntu trusty partner
# deb-src http://archive.canonical.com/ubuntu trusty partner

## This software is not part of Ubuntu, but is offered by third-party
## developers who want to ship their latest software.
deb http://extras.ubuntu.com/ubuntu trusty main
deb-src http://extras.ubuntu.com/ubuntu trusty main

EOP
) > /etc/apt/sources.list
apt-get update
apt-get upgrade -y


sleep 20
apt-get clean
apt-get update
aptitude install openssh-client=1:5.9p1-5ubuntu1.10
apt-get install openssh-server -y
sleep20
apt-get install aptitude -y
apt-get install ros-indigo-rosbash -y -f -y
apt-get update

apt-get install python-ros-* -y -f -y
sleep 20

apt-get clean
apt-get update
apt-get upgrade -y
apt-get -f install 
sleep20
apt-get install ros-indigo-care-o-bot-robot -y -f -y
sleep20
apt-get install ubuntu-desktop -y 
sudo rosdep init
rosdep update

 
echo -e "\n${green}INFO: Setup udev rules${NC}\n"



https://raw.githubusercontent.com/ipa-nhg-dd/setup_cob4/master/udev_rules/udev_cob.sh
wget -O /etc/init.d/ https://raw.githubusercontent.com/ipa-nhg-dd/setup_cob4/master/udev_rules/udev_cob.sh
update-rc.d udev_cob.sh defaults

echo -e "\n${green}INFO: Setup bash environment${NC}\n"
sleep 5

wget -O /etc/cob.bash.bashrc https://raw.githubusercontent.com/ipa-nhg-dd/setup_cob4/master/cob-pcs/cob.bash.bashrc.b
echo -e "\n${green}INFO: Setup network interfaces${NC}\n"
sleep 5
wget -O /etc/network/interfaces https://raw.githubusercontent.com/ipa-nhg-dd/setup_cob4/master/cob-pcs/networkInterfacesB1

echo -e "\n${green}INFO:  Define users rights${NC}\n"
sleep 5
cp ~/git/setup_cob4/scripts/cob-shutdown /usr/sbin/cob-shutdown
wget -O /usr/sbin/cob-shutdown https://raw.githubusercontent.com/ipa-nhg-dd/setup_cob4/master/scripts/cob-shutdown
sed -i 's/etc\/acpi\/powerbtn.sh/usr\/sbin\/cob-shutdown/g' /etc/acpi/events/powerbtn
%end
###########################ADDING NEW USER#######################
%post --interpreter /bin/bash --nochroot
HOSTNAME=`cat /tmp/HOSTNAME`
sed -i "s/HOSTNAME=.*/HOSTNAME=${HOSTNAME}/" /mnt/sysimage/etc/sysconfig/network
%end

%post --interpreter /bin/bash
echo "::Adding users and groups ::"
##############NewUser#################
############FOR ROBOT-LOCAL USER##########################
sed -i 's/HOME=/home/HOME=/iscsi/user/g' /etc/default/useradd

adduser --disabled-password --gecos "" robot-local --home /home/robot-local

echo "robot-local:robot" | chpasswd
echo "robot-local ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
usermod -m -d /home/robot-local robot-local
mkdir /home/robot-local
chown robot-local:robot-local /home/robot-local
ssh-add
##################ROBOT USER###########################
sed -i 's/HOME=/home/HOME=/iscsi/user/g' /etc/default/useradd

adduser --disabled-password --gecos "" robot --home /u/robot
echo 'robot:robot' | chpasswd

echo "robot ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
usermod -m -d /u/robot robot
mkdir /u/robot
cp -rT /etc/skel /u/robot
chown robot:robot /u/robot
ssh-add
##############################################################



%end

%post
#########################################
echo "\n${green}INFO:Setup local ROOT user${NC}\n"
  sleep 5
#passwd d root
#/usr/bin/passwd -d root

echo "Defaults rootpw" >> /etc/sudoers
rootpw robot
#passwd root --iscrypted $1$tEHboVqc$8dkJ2OvCfg8P3z/ru2puI0


echo "robot-local ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

echo "%users ALL=NOPASSWD:/usr/sbin/cob-shutdown" >> /etc/sudoers
###echo " Defaults env_keep += "https_proxy" " >> /etc/sudoers
sed '$ a Defaults env_keep += "https_proxy"' /etc/sudoers


wget repository

apt-get -y -q update

sleep 20

%end

%post --interpreter /bin/bash
##echo "Defaults env_keep += "https_proxy"" >> /etc/sudoers

echo -e "\n${green}INFO:  Install NFS${NC}\n"
sleep 5
apt-get install lightdm -y

dpkg-reconfigure lightdm
apt-get install nfs-kernel-server autofs -y -f -y
mkdir /u

##grep -q -F '/home /u none bind 0 0' /etc/fstab || sh -c '(echo "/home /u none bind 0 0") > /etc/fstab'
##echo "/home /u none bind 0 0" >> /etc/fstab
##mount /u

grep -q -F '/u *(rw,fsid=0,sync,no_subtree_check)' /etc/exports || sh -c '(echo "/u *(rw,fsid=0,sync,no_subtree_check)") >> /etc/exports'
echo "/u *(rw,fsid=0,sync,no_subtree_check)" >> /etc/exports
sed -i 's/NEED_STADT\=/NEED_STADT\=yes/g' /etc/default/nfs-common
if [ -d "/u/robot/git" ]
then
sed -i 's/home\/robot/u\/robot/g' /etc/passwd
read -p "Reboot the computer for the changes to take effect (y/n)?" choice
case "$choice" in 
y|Y ) echo "Yes" && reboot;;
n|N ) echo "No" && exit;;
* ) echo "invalid"&& exit;;
esac
fi
#############ssh-gedit-display ########################

echo "X11Forwarding yes" >> /etc/ssh/sshd_config

echo "X11UseLocalhost no" >> /etc/ssh/sshd_config
echo "PermitRootLogin yes">> /etc/ssh/sshd_config
/etc/init.d/ssh restart
#######################################################
##########################NTP CONFIGURATION############################
HOST=$(cat /etc/hostname)
echo $HOST

echo "# Specify one or more NTP servers." >> /etc/ntp.conf
echo "# Use servers from the NTP Pool Project. Approved by Ubuntu Technical Board" >> /etc/ntp.conf
echo "# on 2011-02-08 (LP: #104525). See http://www.pool.ntp.org/join.html for" >> /etc/ntp.conf
echo "# more information." >> /etc/ntp.conf
echo "server 0.de.pool.ntp.org" >> /etc/ntp.conf
echo "server 127.127.1.0 # local clock" >> /etc/ntp.conf
echo "fudge 127.127.1.0 stratum 10" >> /etc/ntp.conf
echo "restrict $HOST mask 255.255.255.0 nomodify notrap" >> /etc/ntp.conf
echo "# By default, exchange time with everybody, but don't allow configuration." >> /etc/ntp.conf
echo "restrict -4 default kod notrap nomodify nopeer noquery" >> /etc/ntp.conf
echo "restrict -6 default kod notrap nomodify nopeer noquery" >> /etc/ntp.conf
echo "# Local users may interrogate the ntp server more closely." >> /etc/ntp.conf
echo "restrict 127.0.0.1" >> /etc/ntp.conf
echo "restrict ::1" >> /etc/ntp.conf
############################NETDATA TOOLS##############################

apt-get install zlib1g-dev uuid-dev libmnl-dev gcc make git autoconf autoconf-archive autogen automake pkg-config curl -y
git clone https://github.com/firehol/netdata.git --depth=1 /root/netdata
cd /root/netdata
./netdata-installer.sh
############################NOMACHINE##################################

apt-get install pulseaudio -y
wget http://download.nomachine.com/download/5.1/Linux/nomachine_5.1.9_6_amd64.deb -P /root/nomachine_5.1.9_6_amd64.deb
dpkg -i /root/nomachine_5.1.9_6_amd64.deb
############################Candump tools##################################

initctl stop candump2mongodb
rm /etc/init/candump2mongodb.conf
wget https://raw.githubusercontent.com/ipa320/setup_cob4/master/scripts/socket_buffer.py -P /usr/local/bin/socket_buffer.py
chmod +x /usr/local/bin/socket_buffer.py
wget https://raw.githubusercontent.com/ipa320/setup_cob4/master/scripts/candump_any.conf -P /etc/init/candump_any.conf
initctl start candump_any



%end
